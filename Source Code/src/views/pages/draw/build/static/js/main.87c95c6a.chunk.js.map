{"version":3,"sources":["components/ColorPicker.tsx","components/CanvasControls.tsx","components/Timer.tsx","App.tsx","index.tsx","components/Canvas.tsx"],"names":["ColorPicker","props","colors","handleChangeComplete","color","setState","background","hex","console","log","colorChangeCallback","width","onChangeComplete","this","React","Component","CanvasControls","forwardDrawMode","canvasToolCallback","forwardEraseMode","id","Button","className","onClick","clearCanvasCallback","undoCanvasCallback","redoCanvasCallback","ButtonGroup","submitCanvasCallback","defaultState","current_time","redirect","Timer","onTimerComplete","window","location","href","state","onComplete","isPlaying","duration","total_time","initialRemainingTime","size","canvasColor","brushWidth","chatMessages","game_code","URLSearchParams","search","get","current_word","export_duration","App","canvasRef","chatboxRef","handleColorChange","handleClearCanvas","current","clearCanvas","handleUndoCanvas","undoLast","handleRedoCanvas","redoLast","handleToolChange","draw","changeTool","handleSendMessage","message","handleSubmitCanvas","exportCanvas","bind","createRef","Container","fluid","Row","Col","lg","xs","Canvas","ref","height","ReactDOM","render","StrictMode","document","getElementById","styles","border","borderRadius","canvas","scheduledExport","setInterval","exportSvg","then","res","fetch","method","headers","body","JSON","stringify","svg","Buffer","from","toString","catch","err","undo","redo","eraseMode","style","strokeWidth","strokeColor"],"mappings":"sRAyDeA,E,kDA1BX,WAAYC,GAAa,IAAD,8BACpB,cAAMA,IAVFC,OAAmB,CACvB,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,WAOb,EAKxBC,qBAAuB,SAACC,GACpB,EAAKC,SAAS,CACVC,WAAYF,EAAMG,MAEtBC,QAAQC,IAAIL,EAAMG,KAClB,EAAKN,MAAMS,oBAAoBN,EAAMG,MAVjB,E,0CAaxB,WACI,OACI,8BACA,cAAC,IAAD,CACII,MAAM,MACNC,iBAAmBC,KAAKV,qBACxBD,OAASW,KAAKX,e,GA9BJY,IAAMC,W,0BCyCjBC,E,kDA/Cb,WAAYf,GAAa,IAAD,8BACtB,cAAMA,IAGRgB,gBAAkB,WAAQ,EAAKhB,MAAMiB,oBAAmB,IAJhC,EAKxBC,iBAAmB,WAAQ,EAAKlB,MAAMiB,oBAAmB,IALjC,E,0CAOxB,WACE,OACE,sBAAKE,GAAG,kBAAR,UACE,eAACC,EAAA,EAAD,CACED,GAAG,eACHE,UAAU,cACVC,QAAUV,KAAKZ,MAAMuB,oBAHvB,UAKE,cAAC,IAAD,IALF,YAOA,eAACH,EAAA,EAAD,CACED,GAAG,cACHE,UAAU,cACVC,QAAUV,KAAKZ,MAAMwB,mBAHvB,UAKE,cAAC,IAAD,IALF,WAOA,eAACJ,EAAA,EAAD,CACED,GAAG,cACHE,UAAU,cACVC,QAAUV,KAAKZ,MAAMyB,mBAHvB,UAKE,cAAC,IAAD,IALF,WAOA,eAACC,EAAA,EAAD,CAAaP,GAAG,eAAeE,UAAU,cAAzC,UACI,cAACD,EAAA,EAAD,CAAQC,UAAU,gBAAgBC,QAAUV,KAAKI,gBAAjD,SAAmE,cAAC,IAAD,MACnE,cAACI,EAAA,EAAD,CAAQC,UAAU,gBAAgBC,QAAUV,KAAKM,iBAAjD,SAAoE,cAAC,IAAD,SAExE,eAACE,EAAA,EAAD,CACED,GAAG,gBACHE,UAAU,cACVC,QAAUV,KAAKZ,MAAM2B,qBAHvB,UAKE,cAAC,IAAD,IALF,kB,GApCqBd,IAAMC,W,mCCA7Bc,EAAe,CACjBC,aAAc,GACdC,UAAU,GAiCCC,E,kDA7BX,WAAY/B,GAAa,IAAD,8BACpB,cAAMA,IAIVgC,gBAAkB,WACdzB,QAAQC,IAAI,mBAGZ,EAAKR,MAAM2B,uBAGXM,OAAOC,SAASC,KAAO,sDAVvB,EAAKC,MAAQR,EAFO,E,0CAexB,WACI,OACI,cAAC,uBAAD,CACIS,WAAazB,KAAKoB,gBAClBM,WAAS,EACTC,SAAW3B,KAAKZ,MAAMwC,WACtBC,qBAAuB7B,KAAKwB,MAAMP,aAClC5B,OAAO,UACPyC,KAAO,S,GAxBH7B,IAAMC,WCqBpBc,EAAe,CACjBzB,MAAO,QACPwC,YAAa,QACbC,WAAY,EACZC,aAAc,GACdC,UAAW,IAAIC,gBAAgBd,OAAOC,SAASc,QAAQC,IAAI,cAAgB,SAC3EC,aAAc,IAAIH,gBAAgBd,OAAOC,SAASc,QAAQC,IAAI,SAAW,sCACzET,WAAY,GACZW,gBAAiB,KAwFNC,E,kDAjFZ,WAAYpD,GAAa,IAAD,8BACrB,cAAMA,IAHTqD,eAEwB,IADxBC,gBACwB,IAcxBC,kBAAoB,SAACpD,GAChBI,QAAQC,IAAI,oBAAsBL,GAClC,EAAKC,SAAS,CACVD,MAAOA,KAjBQ,EAqBxBqD,kBAAoB,WAAO,IAAD,EAAE,YAAKH,UAAUI,eAAf,SAAwBC,eArB5B,EAsBxBC,iBAAmB,WAAO,IAAD,EAAE,YAAKN,UAAUI,eAAf,SAAwBG,YAtB3B,EAuBxBC,iBAAmB,WAAO,IAAD,EAAE,YAAKR,UAAUI,eAAf,SAAwBK,YAvB3B,EAwBxBC,iBAAmB,SAACC,GAAmB,IAAD,EAAE,YAAKX,UAAUI,eAAf,SAAwBQ,WAAWD,IAxBnD,EAyBxBE,kBAAoB,SAACC,GAAsB,EAAK/D,SAAS,CAAEyC,aAAa,GAAD,mBAAM,EAAKT,MAAMS,cAAjB,CAA+BsB,OAzB9E,EA0BxBC,mBAAqB,WAAO,IAAD,EACzB7D,QAAQC,IAAI,sBACZ,YAAK6C,UAAUI,eAAf,SAAwBY,gBA1BvB,EAAKjC,MAAQR,EACb,EAAK2B,kBAAoB,EAAKA,kBAAkBe,KAAvB,gBACzB/D,QAAQC,IAAI,eAAiB,EAAK4B,MAAMU,WAExC,EAAKO,UAAYxC,IAAM0D,YACvB,EAAKjB,WAAazC,IAAM0D,YAPH,E,0CA+BxB,WACC,OACE,eAACC,EAAA,EAAD,CAAWC,OAAK,EAAhB,UACE,eAACC,EAAA,EAAD,CAAKrD,UAAU,YAAf,UACE,eAACsD,EAAA,EAAD,CAAKC,GAAI,EAAT,kCAAmChE,KAAKwB,MAAMc,aAA9C,QACA,cAACyB,EAAA,EAAD,CAAKxD,GAAG,uBAAuB0D,GAAI,GAAID,GAAI,EAA3C,6BAGA,eAACD,EAAA,EAAD,CAAKC,GAAI,EAAT,6BAA8BhE,KAAKwB,MAAMe,gBAAzC,UACA,cAACwB,EAAA,EAAD,CAAKC,GAAI,EAAT,SAAchE,KAAKwB,MAAMU,YACzB,cAAC6B,EAAA,EAAD,CAAKC,GAAI,EAAT,SACE,cAAC,EAAD,CACEpC,WAAa5B,KAAKwB,MAAMI,WACxBb,qBAAuBf,KAAKwD,0BAIlC,eAACM,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,CAAKxD,GAAG,eAAeyD,GAAI,EAA3B,UACE,qBAAKzD,GAAG,eAAeE,UAAU,eAAjC,SACE,cAAC,EAAD,CAAaZ,oBAAqBG,KAAK2C,sBAEzC,8BACE,cAAC,EAAD,CACIhC,oBAAsBX,KAAK4C,kBAC3BhC,mBAAqBZ,KAAK+C,iBAC1BlC,mBAAqBb,KAAKiD,iBAC1B5C,mBAAqBL,KAAKmD,iBAC1BpC,qBAAuBf,KAAKwD,0BAIpC,cAACO,EAAA,EAAD,CAAKxD,GAAG,iBAAR,SACE,cAAC2D,EAAA,EAAD,CACEC,IAAMnE,KAAKyC,UACX3C,MAAOE,KAAKZ,MAAMU,MAClBsE,OAAQpE,KAAKZ,MAAMgF,OACnB7E,MAAOS,KAAKwB,MAAMjC,MAClBwC,YAAa/B,KAAKwB,MAAMO,YACxBC,WAAYhC,KAAKwB,MAAMQ,WACvBE,UAAWlC,KAAKwB,MAAMU,UACtBK,gBAAiBvC,KAAKwB,MAAMe,8B,GA5ExBtC,IAAMC,W,cC5CxBmE,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,CAAKzE,MAAM,OAAOsE,OAAO,YAE3BI,SAASC,eAAe,U,gHCcpBC,EAAS,CACXC,OAAQ,0BACRC,aAAc,WAGZV,E,kDAGF,WAAY9E,GAAa,IAAD,8BACpB,cAAMA,IAHFyF,YAEgB,EAEpB,EAAKA,OAAS5E,IAAM0D,YACpB,EAAKmB,kBAHe,E,qDAMxB,c,kCAEA,c,6BAEA,WAAmB,IAAD,OACdC,aAAY,WACR,EAAKtB,iBACNzD,KAAKZ,MAAMmD,mB,0BAGlB,WAAgB,IAAD,SACX,UAAAvC,KAAK6E,OAAOhC,eAAZ,SAAqBmC,YACpBC,MAAK,SAACC,GACHvF,QAAQC,IAAI,6BAA+B,EAAKR,MAAM8C,WACtDiD,MAAM,qBAAsB,CACxBC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CACjBtD,UAAW,EAAK9C,MAAM8C,UACtBuD,IAAKC,EAAOC,KAAKT,EAAK,UAAUU,SAAS,cAGhDX,MAAK,SAACC,GACHvF,QAAQC,IAAI,kBACbiG,OAAM,SAACC,GACNnG,QAAQC,IAAI,8BAAgC2F,KAAKC,UAAUM,UAEhED,OAAM,SAACC,GACNnG,QAAQC,IAAI,kDAAoD2F,KAAKC,UAAUM,S,yBAIvF,WAAe,IAAD,EAAE,UAAA9F,KAAK6E,OAAOhC,eAAZ,SAAqBC,gB,sBACrC,WAAY,IAAD,EAAE,UAAA9C,KAAK6E,OAAOhC,eAAZ,SAAqBkD,S,sBAClC,WAAY,IAAD,EAAE,UAAA/F,KAAK6E,OAAOhC,eAAZ,SAAqBmD,S,wBAClC,SAAW5C,GAAgB,IAAD,EAAE,UAAApD,KAAK6E,OAAOhC,eAAZ,SAAqBoD,WAAW7C,K,oBAE5D,WACI,OACI,cAAC,IAAD,CACMe,IAAMnE,KAAK6E,OACXqB,MAAQxB,EACR5E,MAAQE,KAAKZ,MAAMU,MACnBsE,OAASpE,KAAKZ,MAAMgF,OACpB+B,YAAcnG,KAAKZ,MAAM4C,WACzBoE,YAAepG,KAAKZ,MAAMG,MAC1BwC,YAAe/B,KAAKZ,MAAM2C,kB,GAvDvB9B,IAAMC,WA6DZgE,Q","file":"static/js/main.87c95c6a.chunk.js","sourcesContent":["/*\n * @author Sam Basile\n * React Color Picker for the brush color\n *\n */\nimport React from 'react';\nimport { CirclePicker } from 'react-color';\n\n/* \n *  Passed in from App.tsx\n *   \n */\ntype ColorPickerProps = {\n    colorChangeCallback: any //Callback to parent to change state\n};\n\nconst style = {\n    transform: 'rotate(90deg)',\n};\n\nclass ColorPicker extends React.Component<ColorPickerProps, {}> {\n    //Avaliable colors\n    private colors: string[] = [\n        \"#d63636\", \"#e68e3c\", \"#e6ce50\", \"#49a059\", \"#5c9ddd\",\n        \"#c52e8b\", \"#633894\", \"#653716\", \"#101113\"\n    ];\n\n    /*private style = {\n        transform: 'rotate(90deg)'\n    };*/\n\n    constructor(props: any) {\n        super(props);\n    }\n\n    //Change brush color in parent state\n    handleChangeComplete = (color: any) => {\n        this.setState({\n            background: color.hex\n        });\n        console.log(color.hex);\n        this.props.colorChangeCallback(color.hex);\n    };\n\n    render() {\n        return (\n            <div /*style={style}*/>\n            <CirclePicker //from react-color\n                width=\"80%\"\n                onChangeComplete={ this.handleChangeComplete }\n                colors={ this.colors }\n             />\n             </div>\n        );\n    }\n}\n\nexport default ColorPicker;","import React from \"react\";\nimport { Button, ButtonGroup } from \"react-bootstrap\";\nimport * as fa from \"react-icons/fa\";\n\ntype CanvasControlProps = {\n    //Callbacks\n    clearCanvasCallback: any,\n    undoCanvasCallback: any,\n    redoCanvasCallback: any,\n    canvasToolCallback: any,\n    submitCanvasCallback: any\n};\n\nclass CanvasControls extends React.Component<CanvasControlProps, {}> {\n  constructor(props: any) {\n    super(props);\n  }\n\n  forwardDrawMode = () => { this.props.canvasToolCallback(true); }\n  forwardEraseMode = () => { this.props.canvasToolCallback(false); }\n\n  render() {\n    return (\n      <div id=\"canvas-controls\">\n        <Button\n          id=\"clear-button\"\n          className=\"left-button\"\n          onClick={ this.props.clearCanvasCallback }\n        >\n          <fa.FaEraser /> Clear\n        </Button>\n        <Button\n          id=\"undo-button\"\n          className=\"left-button\"\n          onClick={ this.props.undoCanvasCallback }\n        >\n          <fa.FaUndo /> Undo\n        </Button>\n        <Button\n          id=\"redo-button\"\n          className=\"left-button\"\n          onClick={ this.props.redoCanvasCallback }\n        >\n          <fa.FaRedo /> Redo\n        </Button>\n        <ButtonGroup id=\"tool-section\" className=\"left-button\">\n            <Button className=\"button-spaced\" onClick={ this.forwardDrawMode }><fa.FaPencilAlt /></Button>\n            <Button className=\"button-spaced\" onClick={ this.forwardEraseMode }><fa.FaEraser /></Button>\n        </ButtonGroup>\n        <Button\n          id=\"submit-button\"\n          className=\"left-button\"\n          onClick={ this.props.submitCanvasCallback }\n        >\n          <fa.FaPrint /> Done\n        </Button>\n      </div>\n    );\n  }\n}\n\nexport default CanvasControls;","import React from 'react';\nimport { CountdownCircleTimer, CountdownCircleTimerProps } from 'react-countdown-circle-timer';\n\ntype TimerProps = {\n    total_time: number,\n    submitCanvasCallback: any\n};\n\ntype TimerState = {\n    current_time: number\n    redirect: boolean\n};\n\nconst defaultState = {\n    current_time: 30,\n    redirect: false\n};\n\nclass Timer extends React.Component<TimerProps, TimerState> {\n    constructor(props: any) {\n        super(props);\n        this.state = defaultState;\n    }\n\n    onTimerComplete = () => {\n        console.log(\"Timer completed\");\n\n        //Upload image for final time\n        this.props.submitCanvasCallback();\n\n        //Redirect to game over page\n        window.location.href = 'https://draw-chat-csci3308.herokuapp.com/game_over';\n    };\n\n    render() {\n        return(\n            <CountdownCircleTimer\n                onComplete={ this.onTimerComplete }\n                isPlaying\n                duration={ this.props.total_time }\n                initialRemainingTime={ this.state.current_time }\n                colors=\"#A30000\"\n                size={ 50 }\n            />\n        );\n    }\n}\n\nexport default Timer;","/*\n * @author Sam Basile\n * Main React Component that renders all child components\n */\nimport React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Canvas from './components/Canvas';\nimport ColorPicker from './components/ColorPicker';\nimport CanvasControls from './components/CanvasControls';\nimport ChatBox from './components/ChatBox';\nimport { Container, Row, Col, Button } from 'react-bootstrap';\nimport Timer from './components/Timer';\n\n/*\n *  Think of these as global variables, they are\n *  passed down to the child components and updates\n *  in here are automatically reflected to children\n */\ntype AppState = {\n    color: string,\n    canvasColor: string,\n    brushWidth: number,\n    chatMessages: string[],\n    game_code: string,\n    current_word: string,\n    total_time: number,\n    export_duration: number\n};\n\n/*\n * Think of these as global constants\n */\ntype AppProps = {\n  width: string,\n  height: string\n};\n\n//Default state\nconst defaultState = {\n    color: \"black\",\n    canvasColor: \"white\",\n    brushWidth: 4,\n    chatMessages: [],\n    game_code: new URLSearchParams(window.location.search).get(\"game_code\") || \"000000\",\n    current_word: new URLSearchParams(window.location.search).get(\"word\") || \"*pst* set word in the search params\",\n    total_time: 30,\n    export_duration: 1000\n};\n\nclass App extends React.Component<AppProps, AppState> {\n\n   canvasRef: React.RefObject<Canvas>;\n   chatboxRef: React.RefObject<ChatBox>;\n   constructor(props: any) {\n      super(props);\n      this.state = defaultState;\n      this.handleColorChange = this.handleColorChange.bind(this);\n      console.log(\"game_code = \" + this.state.game_code);\n\n      this.canvasRef = React.createRef();\n      this.chatboxRef = React.createRef();\n   }\n\n   /* \n    * Get color from ColorPicker component and send it to\n    *  the Canvas component via a callback\n    */\n   handleColorChange = (color: any) => {\n        console.log(\"new brush color: \" + color as string);\n        this.setState({\n            color: color as string\n        });\n   }\n\n   handleClearCanvas = () => { this.canvasRef.current?.clearCanvas(); }\n   handleUndoCanvas = () => { this.canvasRef.current?.undoLast(); }\n   handleRedoCanvas = () => { this.canvasRef.current?.redoLast(); }\n   handleToolChange = (draw: boolean) => { this.canvasRef.current?.changeTool(draw); }\n   handleSendMessage = (message: string) => { this.setState({ chatMessages: [...this.state.chatMessages, message ] }); }\n   handleSubmitCanvas = () => { \n     console.log(\"handleSubmitCanvas\");\n     this.canvasRef.current?.exportCanvas();\n    }\n\n   render() {\n    return (\n      <Container fluid>\n        <Row className=\"upper-row\">\n          <Col lg={2}>The current word is: { this.state.current_word } !</Col>\n          <Col id=\"upper-center-content\" xs={12} lg={7}>\n            Time to Draw :) \n          </Col>\n          <Col lg={1}>Exporting every { this.state.export_duration} ms.</Col>\n          <Col lg={1}>{ this.state.game_code }</Col>\n          <Col lg={1}>\n            <Timer\n              total_time={ this.state.total_time }\n              submitCanvasCallback={ this.handleSubmitCanvas }\n            />\n          </Col>\n        </Row>\n        <Row>\n          <Col id=\"left-content\" lg={1}>\n            <div id=\"color-picker\" className=\"color-picker\">\n              <ColorPicker colorChangeCallback={this.handleColorChange} />\n            </div>\n            <div>\n              <CanvasControls \n                  clearCanvasCallback={ this.handleClearCanvas }\n                  undoCanvasCallback={ this.handleUndoCanvas }\n                  redoCanvasCallback={ this.handleRedoCanvas }\n                  canvasToolCallback={ this.handleToolChange }\n                  submitCanvasCallback={ this.handleSubmitCanvas }\n              />\n            </div>\n          </Col>\n          <Col id=\"canvas-content\">\n            <Canvas\n              ref={ this.canvasRef }\n              width={this.props.width}\n              height={this.props.height}\n              color={this.state.color}\n              canvasColor={this.state.canvasColor}\n              brushWidth={this.state.brushWidth}\n              game_code={this.state.game_code}\n              export_duration={this.state.export_duration}\n            />\n          </Col>\n        </Row>\n      </Container>\n    );\n   }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport './index.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App width=\"100%\" height=\"600px\"/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","/*\n * @author Sam Basile\n * React component for drawing on\n */ \nimport React from \"react\";\nimport { ReactSketchCanvas } from \"react-sketch-canvas\";\n\n/*\n * Passed in from parent, mutable by the parent\n * See \"Lifting the State\" for React\n */\ntype CanvasProps = {\n    width: string,\n    height: string,\n    color: string,\n    canvasColor: string,\n    brushWidth: number,\n    game_code: string,\n    export_duration: number\n};\n\n/*\n *  CSS styles for ReactSketchCanvas\n */\nconst styles = {\n    border: \"0.0625rem solid #9c9c9c\",\n    borderRadius: \"0.25rem\",\n};\n\nclass Canvas extends React.Component<CanvasProps, {}> {\n    private canvas: React.RefObject<ReactSketchCanvas>;\n\n    constructor(props: any) {\n        super(props);\n        this.canvas = React.createRef();\n        this.scheduledExport();\n    }\n\n    componentDidMount() { /* TODO */ }\n\n    componentWillUnmount() {/* TODO */ }\n\n    scheduledExport() {\n        setInterval(() => {\n            this.exportCanvas();\n        }, this.props.export_duration);\n    }\n\n    exportCanvas() {\n        this.canvas.current?.exportSvg()\n        .then((res) => {\n            console.log(\"Sending post. game_code = \" + this.props.game_code);\n            fetch('/draw/update_image', {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ \n                    game_code: this.props.game_code,\n                    svg: Buffer.from(res, 'binary').toString('base64') \n                })\n            })\n            .then((res) => {\n                console.log(\"POSTed svg!\");\n            }).catch((err) => {\n                console.log(\"Failed to POST svg. Error: \" + JSON.stringify(err));\n            });\n        }).catch((err) => {\n            console.log(\"Error occured in internal image export. Error: \" + JSON.stringify(err));\n        });\n    }\n\n    clearCanvas() { this.canvas.current?.clearCanvas(); }\n    undoLast() { this.canvas.current?.undo(); }\n    redoLast() { this.canvas.current?.redo(); }\n    changeTool(draw: boolean) { this.canvas.current?.eraseMode(!draw); }\n\n    render() {\n        return (\n            <ReactSketchCanvas\n                  ref={ this.canvas }\n                  style={ styles }\n                  width={ this.props.width }\n                  height={ this.props.height }\n                  strokeWidth={ this.props.brushWidth }\n                  strokeColor= { this.props.color }\n                  canvasColor= { this.props.canvasColor }\n              />\n        );\n    }\n}\n\nexport default Canvas;"],"sourceRoot":""}